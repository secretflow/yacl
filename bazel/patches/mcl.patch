diff --git a/CMakeLists.txt b/CMakeLists.txt
index f2ee05c5..8fcb4f23 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -134,6 +134,11 @@ endif()
 target_compile_options(mcl PRIVATE ${MCL_COMPILE_OPTIONS})
 target_compile_options(mcl_st PRIVATE ${MCL_COMPILE_OPTIONS})
 
+set(TARGET_FLAG "")
+if(DEFINED CMAKE_ANDROID_ARCH_LLVM_TRIPLE)
+	set(TARGET_FLAG "--target=${CMAKE_ANDROID_ARCH_LLVM_TRIPLE}")
+endif()
+
 #	set_target_properties(mcl PROPERTIES
 #		CXX_STANDARD 11
 #		CXX_STANDARD_REQUIRED YES
@@ -168,16 +173,16 @@ elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND NOT APPLE)
 		target_sources(mcl_st PRIVATE src/asm/bint-x64-amd64.S)
 	endif()
 else()
-	if(NOT CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-		message(FATAL_ERROR "requiring clang++. cmake -DCMAKE_CXX_COMPILER=clang++ ..")
-	endif()
+	# if(NOT CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+	# 	message(FATAL_ERROR "requiring clang++. cmake -DCMAKE_CXX_COMPILER=clang++ ..")
+	# endif()
 	set(BINT_OBJ "${CMAKE_CURRENT_BINARY_DIR}/bint${BIT}.o")
 	message("bint_obj=" ${BINT_OBJ})
 	target_compile_definitions(mcl PUBLIC MCL_BINT_ASM_X64=0)
 	target_compile_definitions(mcl_st PUBLIC MCL_BINT_ASM_X64=0)
 
 	add_custom_command(OUTPUT ${BINT_OBJ}
-		COMMAND ${CMAKE_CXX_COMPILER} -c -o ${BINT_OBJ} ${CMAKE_CURRENT_SOURCE_DIR}/src/bint${BIT}.ll -O3 -fPIC
+		COMMAND clang++ -c -o ${BINT_OBJ} ${CMAKE_CURRENT_SOURCE_DIR}/src/bint${BIT}.ll -O3 -fPIC ${TARGET_FLAG}
 		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
 	add_custom_target(gen_bint.o
 		SOURCES ${BINT_OBJ})
@@ -210,7 +215,7 @@ elseif(${MCL_USE_LLVM})
 	target_compile_definitions(mcl_st PUBLIC MCL_USE_LLVM=1)
 
 	add_custom_command(OUTPUT ${BASE_OBJ}
-		COMMAND ${CMAKE_CXX_COMPILER} -c -o ${BASE_OBJ} ${CMAKE_CURRENT_SOURCE_DIR}/src/base${BIT}.ll -O3 -fPIC
+		COMMAND clang++ -c -o ${BASE_OBJ} ${CMAKE_CURRENT_SOURCE_DIR}/src/base${BIT}.ll -O3 -fPIC ${TARGET_FLAG}
 		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
 	add_custom_target(gen_base.o
 		SOURCES ${BASE_OBJ})
@@ -222,7 +227,7 @@ elseif(${MCL_USE_LLVM})
 endif()
 
 # use src/msm_avx.cpp on x64
-if(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64") # Win64
+# if(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64") # Win64
 #	set(MSM_OBJ "${CMAKE_CURRENT_BINARY_DIR}/msm_avx.obj")
 
 #	add_custom_command(OUTPUT ${MSM_OBJ}
@@ -236,20 +241,20 @@ if(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64") # Win64
 #	add_dependencies(mcl_st msm_avx.o)
 #	target_sources(mcl_st PRIVATE ${MSM_OBJ})
 
-elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND NOT APPLE)
-	set(MSM_OBJ "${CMAKE_CURRENT_BINARY_DIR}/msm_avx.o")
-
-	add_custom_command(OUTPUT ${MSM_OBJ}
-		COMMAND ${CMAKE_CXX_COMPILER} -c -o ${MSM_OBJ} ${CMAKE_CURRENT_SOURCE_DIR}/src/msm_avx.cpp ${MCL_COMPILE_OPTIONS} -I ${CMAKE_CURRENT_SOURCE_DIR}/include -mavx512f -mavx512ifma -std=c++11 -fno-exceptions -fno-rtti -DCYBOZU_DONT_USE_STRING -DCYBOZU_DONT_USE_EXCEPTION -DNDEBUG
-		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
-	add_custom_target(msm_avx.o
-		SOURCES ${MSM_OBJ})
-	target_link_libraries(mcl PUBLIC ${MSM_OBJ})
-	add_dependencies(mcl msm_avx.o)
-	target_link_libraries(mcl_st PUBLIC ${MSM_OBJ})
-	add_dependencies(mcl_st msm_avx.o)
-	target_sources(mcl_st PRIVATE ${MSM_OBJ})
-endif()
+# elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND NOT APPLE)
+# 	set(MSM_OBJ "${CMAKE_CURRENT_BINARY_DIR}/msm_avx.o")
+
+# 	add_custom_command(OUTPUT ${MSM_OBJ}
+# 		COMMAND ${CMAKE_CXX_COMPILER} -c -o ${MSM_OBJ} ${CMAKE_CURRENT_SOURCE_DIR}/src/msm_avx.cpp ${MCL_COMPILE_OPTIONS} -I ${CMAKE_CURRENT_SOURCE_DIR}/include -mavx512f -mavx512ifma -std=c++11 -fno-exceptions -fno-rtti -DCYBOZU_DONT_USE_STRING -DCYBOZU_DONT_USE_EXCEPTION -DNDEBUG
+# 		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
+# 	add_custom_target(msm_avx.o
+# 		SOURCES ${MSM_OBJ})
+# 	target_link_libraries(mcl PUBLIC ${MSM_OBJ})
+# 	add_dependencies(mcl msm_avx.o)
+# 	target_link_libraries(mcl_st PUBLIC ${MSM_OBJ})
+# 	add_dependencies(mcl_st msm_avx.o)
+# 	target_sources(mcl_st PRIVATE ${MSM_OBJ})
+# endif()
 
 if(MCL_TEST_WITH_GMP)
 	if(NOT MSVC)
diff --git a/include/mcl/op.hpp b/include/mcl/op.hpp
index 5bf4bc7b..1da38f1d 100644
--- a/include/mcl/op.hpp
+++ b/include/mcl/op.hpp
@@ -411,13 +411,7 @@ inline void dump(const std::string& s)
 
 } } // mcl::fp
 
-#ifndef MCL_MSM
-  #if (/*defined(_WIN64) ||*/ defined(__x86_64__)) && !defined(__APPLE__) && (MCL_SIZEOF_UNIT == 8)
-    #define MCL_MSM 1
-  #else
-    #define MCL_MSM 0
-  #endif
-#endif
+#define MCL_MSM 0
 
 #if MCL_MSM == 1
 namespace mcl { namespace msm {
diff --git a/Makefile b/Makefile
index a60dbf59..0d27036b 100644
--- a/Makefile
+++ b/Makefile
@@ -3,7 +3,8 @@ LIB_DIR?=lib
 OBJ_DIR?=obj
 EXE_DIR?=bin
 MCL_SIZEOF_UNIT?=$(shell expr $(BIT) / 8)
-CLANG?=clang++$(LLVM_VER)
+# CLANG?=clang++$(LLVM_VER)
+CLANG=$(CXX)
 SRC_SRC=fp.cpp bn_c256.cpp bn_c384.cpp bn_c384_256.cpp bn_c512.cpp she_c256.cpp
 TEST_SRC=fp_test.cpp ec_test.cpp fp_util_test.cpp window_method_test.cpp elgamal_test.cpp fp_tower_test.cpp gmp_test.cpp bn_test.cpp bn384_test.cpp glv_test.cpp paillier_test.cpp she_test.cpp vint_test.cpp bn512_test.cpp conversion_test.cpp
 TEST_SRC+=bn_c256_test.cpp bn_c384_test.cpp bn_c384_256_test.cpp bn_c512_test.cpp
