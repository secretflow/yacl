diff --git a/sources/cmake/linux/GNU8.2.0.cmake b/sources/cmake/linux/GNU8.2.0.cmake
index 24d7e0f..15dd433 100644
--- a/sources/cmake/linux/GNU8.2.0.cmake
+++ b/sources/cmake/linux/GNU8.2.0.cmake
@@ -32,7 +32,7 @@ set(LINK_FLAG_DYNAMIC_LINUX "${LINK_FLAG_SECURITY} -nostdlib")
 # Dynamically link lib c (libdl is for old apps)
 set(LINK_FLAG_DYNAMIC_LINUX "${LINK_FLAG_DYNAMIC_LINUX} -Wl,-call_shared,-lc")
 # Create a shared library
-set(LINK_FLAG_DYNAMIC_LINUX "-Wl,-shared")
+set(LINK_FLAG_DYNAMIC_LINUX "-Wl,-shared,-fuse-ld=bfd")
 if(${ARCH} MATCHES "ia32")
   # Tells the compiler to generate code for a specific architecture (32)
   set(LINK_FLAG_DYNAMIC_LINUX "${LINK_FLAG_DYNAMIC_LINUX} -m32")
@@ -74,7 +74,7 @@ if ((${ARCH} MATCHES "ia32") OR (NOT NONPIC_LIB))
 endif()
 
 # Security flag that adds compile-time and run-time checks
-set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_FORTIFY_SOURCE=2")
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2")
 
 if(NOT NONPIC_LIB)
   # Position Independent Execution (PIE)
@@ -95,6 +95,8 @@ if(${ARCH} MATCHES "ia32")
   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
 endif(${ARCH} MATCHES "ia32")
 
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-function -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unknown-pragmas -Wno-missing-braces -Wno-comment -Wno-strict-aliasing -Wno-parentheses -Wno-array-parameter")
+
 # Optimization level = 3, no-debug definition (turns off asserts), warnings=errors
 set (CMAKE_C_FLAGS_RELEASE " -O3 -DNDEBUG -Werror")
 
diff --git a/sources/cmake/macosx/AppleClang11.0.0.cmake b/sources/cmake/macosx/AppleClang11.0.0.cmake
index 5b92877..ccb963e 100644
--- a/sources/cmake/macosx/AppleClang11.0.0.cmake
+++ b/sources/cmake/macosx/AppleClang11.0.0.cmake
@@ -20,12 +20,6 @@
 
 # Security Linker flags
 set(LINK_FLAG_SECURITY "")
-# Disallows undefined symbols in object files. Undefined symbols in shared libraries are still allowed
-set(LINK_FLAG_SECURITY "${LINK_FLAG_SECURITY} -Wl,-z,defs")
-# Stack execution protection
-set(LINK_FLAG_SECURITY "${LINK_FLAG_SECURITY} -Wl,-z,noexecstack")
-# Data relocation and protection (RELRO)
-set(LINK_FLAG_SECURITY "${LINK_FLAG_SECURITY} -Wl,-z,relro -Wl,-z,now")
 # Prevents the compiler from using standard libraries and startup files when linking.
 set(LINK_FLAG_DYNAMIC_MACOSX "${LINK_FLAG_SECURITY} -nostdlib")
 # Dynamically link lib c (libdl is for old apps)
@@ -79,7 +73,7 @@ if ((${ARCH} MATCHES "ia32") OR (NOT NONPIC_LIB))
 endif()
 
 # Security flag that adds compile-time and run-time checks
-set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_FORTIFY_SOURCE=2")
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2")
 
 if(NOT NONPIC_LIB)
   # Position Independent Execution (PIE)
@@ -98,6 +92,8 @@ if(${ARCH} MATCHES "ia32")
   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
 endif(${ARCH} MATCHES "ia32")
 
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-function -Wno-unused-variable -Wno-unknown-pragmas -Wno-missing-braces -Wno-unused-command-line-argument -Wno-unused-but-set-variable -Wno-unknown-warning-option")
+
 # Optimization level = 3, no-debug definition (turns off asserts), warnings=errors
 set (CMAKE_C_FLAGS_RELEASE " -O3 -DNDEBUG -Werror")
 
@@ -115,3 +111,5 @@ set(l9_opt "${l9_opt} -march=haswell -mavx2 -maes -mpclmul -msha -mrdrnd -mrdsee
 set(n0_opt "${n0_opt} -march=knl -mavx2 -maes -mavx512f -mavx512cd -mavx512pf -mavx512er -mpclmul -msha -mrdrnd -mrdseed")
 set(k0_opt "${k0_opt} -march=skylake-avx512")
 set(k0_opt "${k0_opt} -maes -mavx512f -mavx512cd -mavx512vl -mavx512bw -mavx512dq -mavx512ifma -mpclmul -msha -mrdrnd -mrdseed -madx -mgfni -mvaes -mvpclmulqdq -mavx512vbmi -mavx512vbmi2")
+set(k1_opt "${k1_opt} -march=skylake-avx512")
+set(k1_opt "${k1_opt} -maes -mavx512f -mavx512cd -mavx512vl -mavx512bw -mavx512dq -mavx512ifma -mpclmul -msha -mrdrnd -mrdseed -madx -mgfni -mvaes -mvpclmulqdq -mavx512vbmi -mavx512vbmi2")
diff --git a/sources/cmake/macosx/common.cmake b/sources/cmake/macosx/common.cmake
index 85ec3ad..67bb9f9 100644
--- a/sources/cmake/macosx/common.cmake
+++ b/sources/cmake/macosx/common.cmake
@@ -18,7 +18,7 @@
 # Intel® Integrated Performance Primitives Cryptography (Intel® IPP Cryptography)
 #
 
-set(OS_DEFAULT_COMPILER Intel19.0.0)
+set(OS_DEFAULT_COMPILER AppleClang11.0.0)
 
 set(LIBRARY_DEFINES "${LIBRARY_DEFINES} -DIPP_PIC -DOSXEM64T -DLINUX32E -D_ARCH_EM64T")
 #set(LIBRARY_DEFINES "${LIBRARY_DEFINES} -DBN_OPENSSL_DISABLE")
\ No newline at end of file
diff --git a/sources/ippcp/crypto_mb/src/cmake/linux/GNU.cmake b/sources/ippcp/crypto_mb/src/cmake/linux/GNU.cmake
index a2abeeb..67aca8b 100644
--- a/sources/ippcp/crypto_mb/src/cmake/linux/GNU.cmake
+++ b/sources/ippcp/crypto_mb/src/cmake/linux/GNU.cmake
@@ -31,7 +31,7 @@ set(CMAKE_C_FLAGS_SECURITY "${CMAKE_C_FLAGS_SECURITY} -Wformat -Wformat-security
 if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
     if(NOT DEFINED NO_FORTIFY_SOURCE)
         # Security flag that adds compile-time and run-time checks. 
-        set(CMAKE_C_FLAGS_SECURITY "${CMAKE_C_FLAGS_SECURITY} -D_FORTIFY_SOURCE=2")
+        set(CMAKE_C_FLAGS_SECURITY "${CMAKE_C_FLAGS_SECURITY} -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2")
     endif()
 endif()
 
@@ -51,7 +51,7 @@ set(CMAKE_C_FLAGS_SECURITY "${CMAKE_C_FLAGS_SECURITY} -Werror")
 # Linker flags
 
 # Create shared library
-set(LINK_FLAGS_DYNAMIC " -Wl,-shared")
+set(LINK_FLAGS_DYNAMIC " -Wl,-shared,-fuse-ld=bfd")
 # Add export files
 set(LINK_FLAGS_DYNAMIC "${LINK_FLAGS_DYNAMIC} ${CRYPTO_MB_SOURCES_DIR}/cmake/dll_export/crypto_mb.linux.lib-export")
 
@@ -69,6 +69,7 @@ set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
 
 # Suppress warnings from casts from a pointer to an integer type of a different size
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-pointer-to-int-cast")
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-function -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unknown-pragmas -Wno-missing-braces -Wno-comment -Wno-strict-aliasing -Wno-parentheses")
 
 # Optimization level = 3, no-debug definition (turns off asserts)
 set(CMAKE_C_FLAGS_RELEASE " -O3 -DNDEBUG")
diff --git a/sources/ippcp/crypto_mb/src/cmake/macosx/AppleClang.cmake b/sources/ippcp/crypto_mb/src/cmake/macosx/AppleClang.cmake
index ea1641d..f98fc2d 100644
--- a/sources/ippcp/crypto_mb/src/cmake/macosx/AppleClang.cmake
+++ b/sources/ippcp/crypto_mb/src/cmake/macosx/AppleClang.cmake
@@ -17,10 +17,6 @@
 # Security Linker flags
 
 set(LINK_FLAG_SECURITY "") 
-# Data relocation and protection (RELRO)
-set(LINK_FLAG_SECURITY "${LINK_FLAG_SECURITY} -Wl,-z,relro -Wl,-z,now")
-# Stack execution protection
-set(LINK_FLAG_SECURITY "${LINK_FLAG_SECURITY} -Wl,-z,noexecstack")
 
 # Security Compiler flags
 
@@ -30,7 +26,7 @@ set(CMAKE_C_FLAGS_SECURITY "${CMAKE_C_FLAGS_SECURITY} -Wformat -Wformat-security
 
 if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
     # Security flag that adds compile-time and run-time checks. 
-    set(CMAKE_C_FLAGS_SECURITY "${CMAKE_C_FLAGS_SECURITY} -D_FORTIFY_SOURCE=2")
+    set(CMAKE_C_FLAGS_SECURITY "${CMAKE_C_FLAGS_SECURITY} -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2")
 endif()
 
 # Stack-based Buffer Overrun Detection
@@ -65,6 +61,8 @@ set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
 # Suppress warnings from casts from a pointer to an integer type of a different size
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-pointer-to-int-cast")
 
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-function -Wno-unused-variable -Wno-unknown-pragmas -Wno-missing-braces -Wno-unknown-warning-option")
+
 # Optimization level = 3, no-debug definition (turns off asserts)
 set(CMAKE_C_FLAGS_RELEASE " -O3 -DNDEBUG")
 set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")

diff --git a/sources/cmake/linux/Clang9.0.0.cmake b/sources/cmake/linux/Clang9.0.0.cmake
index 0015431..f93411c 100644
--- a/sources/cmake/linux/Clang9.0.0.cmake
+++ b/sources/cmake/linux/Clang9.0.0.cmake
@@ -79,7 +79,7 @@ endif()
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fcf-protection=full")

 # Security flag that adds compile-time and run-time checks
-set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_FORTIFY_SOURCE=2")
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

 if(NOT NONPIC_LIB)
   # Position Independent Execution (PIE)
@@ -107,7 +107,7 @@ if(SANITIZERS)
 endif(SANITIZERS)

 # Optimization level = 3, no-debug definition (turns off asserts), warnings=errors
-set (CMAKE_C_FLAGS_RELEASE " -O3 -DNDEBUG -Werror")
+set (CMAKE_C_FLAGS_RELEASE " -O3 -DNDEBUG -Werror -Wno-unused-function -Wno-missing-braces -Wno-unused-but-set-variable -Wno-unknown-pragmas")

 # DEBUG flags - optimization level = 0, generation GDB information (-g)
 set (CMAKE_C_FLAGS_DEBUG " -O0 -g")

diff --git a/sources/include/dispatcher.h b/sources/include/dispatcher.h
index 8290df6..a2f93d7 100644
--- a/sources/include/dispatcher.h
+++ b/sources/include/dispatcher.h
@@ -92,9 +92,13 @@ extern "C" {
   #define LIB_W7 LIB_S8
 #elif defined( _ARCH_EM64T ) && !defined( OSXEM64T ) && !defined( WIN32E ) /* Linux* OS Intel64 supports N0 */
   enum lib_enum {
-     LIB_M7=0, LIB_N8=1, LIB_Y8=2, LIB_E9=3, LIB_L9=4, LIB_N0=5, LIB_K0=6, LIB_K1=7,LIB_NOMORE
+     LIB_E9=0, LIB_L9=1, LIB_K0=2, LIB_K1=3,LIB_NOMORE
   };
-  #define LIB_PX LIB_M7
+  #define LIB_PX LIB_E9
+  #define LIB_M7 LIB_E9
+  #define LIB_N8 LIB_E9
+  #define LIB_Y8 LIB_E9
+  #define LIB_N0 LIB_L9
 #elif defined( _ARCH_EM64T ) && !defined( OSXEM64T ) /* Windows* OS Intel64 doesn't support N0 */
   enum lib_enum {
      LIB_M7=0, LIB_N8=1, LIB_Y8=2, LIB_E9=3, LIB_L9=4, LIB_K0=5, LIB_K1=6, LIB_NOMORE
@@ -103,11 +107,12 @@ extern "C" {
   #define LIB_N0 LIB_L9
 #elif defined( OSXEM64T )
   enum lib_enum {
-     LIB_Y8=0, LIB_E9=1, LIB_L9=2, LIB_K0=3, LIB_K1=4, LIB_NOMORE
+     LIB_E9=0, LIB_L9=1, LIB_K0=2, LIB_K1=3, LIB_NOMORE
   };
-  #define LIB_PX LIB_Y8
-  #define LIB_M7 LIB_Y8
-  #define LIB_N8 LIB_Y8
+  #define LIB_PX LIB_E9
+  #define LIB_M7 LIB_E9
+  #define LIB_N8 LIB_E9
+  #define LIB_Y8 LIB_E9
   #define LIB_N0 LIB_L9
 #elif defined( _ARCH_LRB2 )
   enum lib_enum {
diff --git a/sources/include/owndefs.h b/sources/include/owndefs.h
index dcc1ede..7c1e93e 100644
--- a/sources/include/owndefs.h
+++ b/sources/include/owndefs.h
@@ -632,14 +632,14 @@ extern double            __intel_castu64_f64(unsigned __int64 val);

       #elif defined(linux)
          /* LIN-32, LIN-64 */
-         #if ( defined(_W7) || defined(_M7) )
+         #if ( defined(_W7) || defined(_E9) )
          #define _IPP_DATA 1
          #endif


       /* OSX-32, OSX-64 */
       #elif defined(OSX32) || defined(OSXEM64T)
-         #if ( defined(_Y8) )
+         #if ( defined(_E9) )
          #define _IPP_DATA 1
          #endif
       #endif
diff --git a/sources/ippcp/CMakeLists.txt b/sources/ippcp/CMakeLists.txt
index 315d1a3..8b11c7a 100644
--- a/sources/ippcp/CMakeLists.txt
+++ b/sources/ippcp/CMakeLists.txt
@@ -40,12 +40,12 @@ if(WIN32)
 endif(WIN32)
 if(UNIX)
   if(APPLE)
-    set(BASE_PLATFORM_LIST ${BASE_PLATFORM_LIST} y8 e9 l9 k0 k1)
+    set(BASE_PLATFORM_LIST ${BASE_PLATFORM_LIST} e9 l9 k0 k1)
   else()
     if (${ARCH} MATCHES "ia32")
       set(BASE_PLATFORM_LIST ${BASE_PLATFORM_LIST} w7 s8 p8 g9 h9)
     else()
-      set(BASE_PLATFORM_LIST ${BASE_PLATFORM_LIST} m7 n8 y8 e9 l9 n0 k0 k1)
+      set(BASE_PLATFORM_LIST ${BASE_PLATFORM_LIST} e9 l9 k0 k1)
     endif(${ARCH} MATCHES "ia32")
   endif(APPLE)
 endif(UNIX)
