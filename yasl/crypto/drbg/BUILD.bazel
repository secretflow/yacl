# Copyright 2022 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:yasl.bzl", "yasl_cc_library", "yasl_cc_test")

package(default_visibility = ["//visibility:public"])

yasl_cc_library(
    name = "drbg",
    hdrs = [
        "drbg.h",
    ],
    deps = [
        "@com_google_absl//absl/types:span",
    ],
)

yasl_cc_library(
    name = "nist_aes_drbg",
    srcs = [
        "nist_aes_drbg.cc",
    ],
    hdrs = [
        "nist_aes_drbg.h",
    ],
    # Openssl::libcrypto requires `dlopen`...
    linkopts = ["-ldl"],
    deps = [
        ":drbg",
        ":entropy_source_selector",
        "//yasl/base:byte_container_view",
        "//yasl/base:exception",
        "//yasl/base:int128",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/types:span",
    ],
)

yasl_cc_test(
    name = "nist_aes_drbg_test",
    srcs = ["nist_aes_drbg_test.cc"],
    deps = [
        ":nist_aes_drbg",
    ],
)

yasl_cc_library(
    name = "entropy_source",
    hdrs = [
        "entropy_source.h",
    ],
    deps = [
        "//yasl/base:exception",
        "@com_google_absl//absl/strings",
    ],
)

yasl_cc_library(
    name = "intel_entropy_source",
    srcs = [
        "intel_entropy_source.cc",
    ],
    hdrs = [
        "intel_entropy_source.h",
    ],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
    ],
    deps = [
        ":entropy_source",
        "@com_github_google_cpu_features//:cpu_features",
        "@com_github_intel_ipp//:ipp",
        "@com_google_absl//absl/strings",
    ],
)

yasl_cc_library(
    name = "std_entropy_source",
    srcs = [
        "std_entropy_source.cc",
    ],
    hdrs = [
        "std_entropy_source.h",
    ],
    deps = [
        ":entropy_source",
        "@com_google_absl//absl/strings",
    ],
)

yasl_cc_library(
    name = "entropy_source_selector",
    srcs = [
        "entropy_source_selector.cc",
    ],
    hdrs = [
        "entropy_source_selector.h",
    ],
    deps = [
        ":entropy_source",
    ] + select({
        "@platforms//cpu:aarch64": [
            ":std_entropy_source",
        ],
        "//conditions:default": [
            ":intel_entropy_source",
        ],
    }),
)

yasl_cc_test(
    name = "entropy_source_test",
    srcs = ["entropy_source_test.cc"],
    deps = [
        ":entropy_source_selector",
    ],
)

yasl_cc_library(
    name = "sm4_drbg",
    srcs = [
        "sm4_drbg.cc",
    ],
    hdrs = [
        "sm4_drbg.h",
    ],
    # Openssl::libcrypto requires `dlopen`...
    linkopts = ["-ldl"],
    deps = [
        ":drbg",
        ":entropy_source",
        ":entropy_source_selector",
        "//yasl/base:byte_container_view",
        "//yasl/base:exception",
        "//yasl/base:int128",
        "//yasl/crypto:symmetric_crypto",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/types:span",
    ],
)

yasl_cc_test(
    name = "sm4_drbg_test",
    srcs = ["sm4_drbg_test.cc"],
    deps = [
        ":sm4_drbg",
    ],
)
