# Copyright 2022 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:yasl.bzl", "yasl_cc_library", "yasl_cc_test")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@rules_cc//cc:defs.bzl", "cc_proto_library")

package(default_visibility = ["//visibility:public"])

yasl_cc_library(
    name = "hamming",
    hdrs = ["hamming.h"],
    deps = [
        "//yasl/base:exception",
        "//yasl/base:int128",
        "@com_google_absl//absl/numeric:bits",
        "@com_google_absl//absl/types:span",
    ],
)

yasl_cc_test(
    name = "hamming_test",
    srcs = ["hamming_test.cc"],
    deps = [
        ":hamming",
    ],
)

yasl_cc_library(
    name = "scope_guard",
    hdrs = ["scope_guard.h"],
    deps = ["@com_google_absl//absl/cleanup"],
)

yasl_cc_test(
    name = "scope_guard_test",
    srcs = ["scope_guard_test.cc"],
    deps = [
        ":scope_guard",
    ],
)

yasl_cc_library(
    name = "rand",
    srcs = ["rand.cc"],
    hdrs = ["rand.h"],
    deps = [
        "//yasl/base:exception",
        "//yasl/base:int128",
        "//yasl/crypto:pseudo_random_generator",
        "@com_google_absl//absl/types:span",
    ],
)

yasl_cc_library(
    name = "thread_pool",
    srcs = ["thread_pool.cc"],
    hdrs = ["thread_pool.h"],
    deps = [
        "//yasl/base:exception",
    ],
)

yasl_cc_test(
    name = "thread_pool_test",
    srcs = ["thread_pool_test.cc"],
    deps = [
        ":thread_pool",
    ],
)

yasl_cc_library(
    name = "parallel",
    srcs = [
        "parallel_common.cc",
        "parallel_native.cc",
    ],
    hdrs = [
        "parallel.h",
        "parallel_native.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":thread_pool",
        "//yasl/base:exception",
    ],
)

yasl_cc_test(
    name = "parallel_test",
    srcs = ["parallel_test.cc"],
    deps = [
        ":parallel",
    ],
)

proto_library(
    name = "serializable_proto",
    srcs = ["serializable.proto"],
)

cc_proto_library(
    name = "serializable_cc_proto",
    deps = [":serializable_proto"],
)

yasl_cc_library(
    name = "serialize",
    srcs = ["serialize.cc"],
    hdrs = ["serialize.h"],
    deps = [
        ":serializable_cc_proto",
        "//yasl/base:buffer",
        "//yasl/base:byte_container_view",
        "//yasl/base:int128",
    ],
)

yasl_cc_library(
    name = "elapsed_timer",
    srcs = ["elapsed_timer.cc"],
    hdrs = ["elapsed_timer.h"],
)

yasl_cc_test(
    name = "elapsed_timer_test",
    srcs = ["elapsed_timer_test.cc"],
    deps = [
        ":elapsed_timer",
    ],
)

yasl_cc_library(
    name = "hash",
    hdrs = ["hash.h"],
)
