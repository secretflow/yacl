# Translations template for PROJECT.
# Copyright (C) 2025 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2025-03-11 10:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../src/develop/example_psi.rst:2
msgid "Example: Build a PSI Protocol"
msgstr ""

#: ../../src/develop/example_psi.rst:4
msgid ""
"This is an example of how to use Yacl's ECC api and link to build up a "
"`PSI (Private Set Intersection) "
"<https://en.wikipedia.org/wiki/Private_set_intersection>`_ protocol. The "
"code of this example is avaliable at `link "
"<https://github.com/secretflow/yacl/tree/main/examples/psi/cpp>`_."
msgstr ""

#: ../../src/develop/example_psi.rst:7
msgid ""
"This example is merely designed for demonstration only, please do not use"
" this example in production."
msgstr ""

#: ../../src/develop/example_psi.rst:10
msgid "Step 1: Understand ECDH-PSI"
msgstr ""

#: ../../src/develop/example_psi.rst:12
msgid ""
"Before we start, the ECDH-PSI protocols are formally designed as the "
"following, where lambda indicates the computational security parameter, "
"and H() indicates a cryptographically secure (collision-free) hash "
"function."
msgstr ""

#: ../../src/develop/example_psi.rst:-1
msgid "Alternative text"
msgstr ""

#: ../../src/develop/example_psi.rst:23
msgid "Step 2: Implement Protocol"
msgstr ""

#: ../../src/develop/example_psi.rst:25
msgid ""
"We provide the implementation in the following codes. Note that it's "
"almost always a good idea to separate the definitions and implementations"
" into ``*.h`` and ``*.cc`` files."
msgstr ""

#: ../../src/develop/example_psi.rst:33
msgid ""
"Besides the two files, you also need to write a `BUILD.bazel` file to "
"tell `bazel` how to compile your files together."
msgstr ""

#: ../../src/develop/example_psi.rst:62
msgid "Step 2: Write and Run Tests"
msgstr ""

#: ../../src/develop/example_psi.rst:64
msgid ""
"Also, we recommend all users to write unit tests for implementations. In "
"oder to run the following tests, you can ``cd examples && bazel test "
"//psi/cpp:ecdh_psi_test``."
msgstr ""

#: ../../src/develop/example_psi.rst:70
msgid "Step 3: Generate Executables and Run with CSV files"
msgstr ""

#: ../../src/develop/example_psi.rst:72
msgid ""
"Also, alternatively you can build an executable for two users to actually"
" run the PSI protocols with their private data. We show an example "
"``main.cc`` file in the below."
msgstr ""

#: ../../src/develop/example_psi.rst:77
msgid ""
"In order to compile, run ``bazel build //psi/cpp:ecdh_psi_main -c opt``. "
"The ``-c opt`` flag tells the bazel build system to build a release (or, "
"optimized) version of the executable."
msgstr ""

#: ../../src/develop/example_psi.rst:79
msgid "To run the exeutable, open two terminals in the same machine."
msgstr ""

#: ../../src/develop/example_psi.rst:83
msgid "Please make sure your machine's 10086 and 10087 ports are avaliable."
msgstr ""

#: ../../src/develop/example_psi.rst:85
msgid "In the first terminal, at yacl's project root, run"
msgstr ""

#: ../../src/develop/example_psi.rst:92
msgid "Then in the second terminal, at yacl's project root, run"
msgstr ""

