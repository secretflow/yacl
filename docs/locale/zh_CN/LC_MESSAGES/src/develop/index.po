# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024 Ant Group Co., Ltd
# This file is distributed under the same license as the YACL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: YACL \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-26 10:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../src/develop/index.rst:2
msgid "Develop"
msgstr "开发"

#: ../../src/develop/index.rst:4
msgid ""
"**For Traditioanl PKI:** Since there are so many existing time-proof, "
"efficient, and standardized implementation of PKI algorithms, Yacl **does"
" not re-implement** those algorithms. Instead, Yacl only provides a "
"light-weighted and \"easy-to-use\" wrapper for the most popular "
"industrial libraries (e.g. `OpenSSL <https://openssl.org/>`_, `TongSuo "
"<https://github.com/Tongsuo-Project>`_, `LibSodium "
"<https://doc.libsodium.org/>`_, etc.)"
msgstr ""
"**对于传统 PKI：** 由于已有许多经过时间验证、高效且标准化的 PKI 算法实现，Yacl **并未重新实现** 这些算法。相反，Yacl 仅为最流行的工业库（例如 `OpenSSL <https://openssl.org/>`_、`TongSuo <https://github.com/Tongsuo-Project>`_、`LibSodium <https://doc.libsodium.org/>`_ 等）提供了一个轻量级且“易于使用”的封装。"

#: ../../src/develop/index.rst:6
msgid ""
"**For ECC (Elliptic-Curve Cryptography):** Yacl integrates many curve "
"implementation from OpenSSL, you may use the code in the following to use"
" any curve as you like. For more information about all supported curve "
"names, see: `yacl/crypto/ecc/curve_meta.cc "
"<https://github.com/secretflow/yacl/blob/main/yacl/crypto/ecc/curve_meta.cc>`_"
msgstr ""
"**对于 ECC（椭圆曲线加密）：** Yacl 集成了许多来自 OpenSSL 的曲线实现，您可以使用以下代码来选择任意曲线。有关所有支持的曲线名称的更多信息，请参阅：`yacl/crypto/ecc/curve_meta.cc "
"<https://github.com/secretflow/yacl/blob/main/yacl/crypto/ecc/curve_meta.cc>`_"

#: ../../src/develop/index.rst:24
msgid ""
"**For Randomness** Yacl has also provide some easy-to-use randomness "
"generation functions. Random functions usually start with **Secure** or "
"**Fast**, secure random implementation uses the standardized ctr-drbg, "
"and fast uses hash-drbg. It is always recommended to use "
"**Secure**-Random functions."
msgstr ""
"**对于随机数生成** Yacl 还提供了一些易于使用的随机数生成函数。随机函数通常以 **Secure** 或 **Fast** 开头，安全随机数实现使用标准化的 ctr-drbg，而快速随机数使用 hash-drbg。建议始终使用 **Secure**-Random 函数。"

#: ../../src/develop/index.rst:37
msgid ""
"**For Secure Computation Protocols:** Yacl provides many secure "
"computation primitives, such as OT, VOLE and so on. It is recommended to "
"use the `yacl/kernel/...` api for general usage. For more advanced users,"
" please use `yacl/algorithms/...`."
msgstr ""
"**对于安全计算协议：** Yacl 提供了许多安全计算原语，例如 OT、VOLE 等。建议普通用户使用 `yacl/kernel/...` 接口。对于更高级的用户，请使用 `yacl/algorithms/...`。"

#: ../../src/develop/index.rst:55
msgid ""
"**ECDH-PSI Example:** We also provide a step-to-step demo to demonstrate "
"how to build an ECDH-PSI protocol from the tools that Yacl provides, and "
"then bind the protocol implementation to JAVA and Python. See the "
"following link for more detail."
msgstr ""
"**ECDH-PSI 示例：** 我们还提供了一个逐步演示，展示如何利用 Yacl 提供的工具构建 ECDH-PSI 协议，并将协议实现绑定到 JAVA 和 Python。详情请参阅以下链接。"

