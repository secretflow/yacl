# Copyright 2022 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:yacl.bzl", "yacl_cc_library", "yacl_cc_test")

package(default_visibility = ["//visibility:public"])

yacl_cc_library(
    name = "symmetric_crypto",
    srcs = [
        "symmetric_crypto.cc",
    ],
    hdrs = [
        "symmetric_crypto.h",
    ],
    # Openssl::libcrypto requires `dlopen`...
    linkopts = ["-ldl"],
    deps = [
        "//yacl/base:byte_container_view",
        "//yacl/base:exception",
        "//yacl/base:int128",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/types:span",
    ],
)

yacl_cc_test(
    name = "symmetric_crypto_test",
    srcs = ["symmetric_crypto_test.cc"],
    deps = [
        ":symmetric_crypto",
    ],
)

yacl_cc_library(
    name = "asymmetric_util",
    srcs = ["asymmetric_util.cc"],
    hdrs = ["asymmetric_util.h"],
    deps = [
        "//yacl/base:byte_container_view",
        "//yacl/base:exception",
        "//yacl/utils:scope_guard",
        "@com_github_openssl_openssl//:openssl",
    ],
)

yacl_cc_library(
    name = "asymmetric_crypto",
    hdrs = ["asymmetric_crypto.h"],
    deps = [
        "//yacl/base:byte_container_view",
    ],
)

yacl_cc_library(
    name = "asymmetric_sm2_crypto",
    srcs = ["asymmetric_sm2_crypto.cc"],
    hdrs = ["asymmetric_sm2_crypto.h"],
    # Openssl::libcrypto requires `dlopen`...
    linkopts = ["-ldl"],
    deps = [
        ":asymmetric_crypto",
        ":asymmetric_util",
        "//yacl/base:exception",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/memory",
    ],
)

yacl_cc_test(
    name = "asymmetric_sm2_crypto_test",
    srcs = ["asymmetric_sm2_crypto_test.cc"],
    deps = [
        ":asymmetric_sm2_crypto",
    ],
)

yacl_cc_library(
    name = "asymmetric_rsa_crypto",
    srcs = ["asymmetric_rsa_crypto.cc"],
    hdrs = ["asymmetric_rsa_crypto.h"],
    # Openssl::libcrypto requires `dlopen`...
    linkopts = ["-ldl"],
    deps = [
        ":asymmetric_crypto",
        ":asymmetric_util",
        "//yacl/base:exception",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/memory",
    ],
)

yacl_cc_test(
    name = "asymmetric_rsa_crypto_test",
    srcs = ["asymmetric_rsa_crypto_test.cc"],
    deps = [
        ":asymmetric_rsa_crypto",
    ],
)

yacl_cc_library(
    name = "signing",
    hdrs = ["signing.h"],
    deps = [
        "//yacl/base:byte_container_view",
    ],
)

yacl_cc_library(
    name = "sm2_signing",
    srcs = ["sm2_signing.cc"],
    hdrs = ["sm2_signing.h"],
    # Openssl::libcrypto requires `dlopen`...
    linkopts = ["-ldl"],
    deps = [
        ":asymmetric_util",
        ":signing",
        "//yacl/base:exception",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/memory",
    ],
)

yacl_cc_test(
    name = "sm2_signing_test",
    srcs = ["sm2_signing_test.cc"],
    deps = [
        ":sm2_signing",
    ],
)

yacl_cc_library(
    name = "rsa_signing",
    srcs = ["rsa_signing.cc"],
    hdrs = ["rsa_signing.h"],
    # Openssl::libcrypto requires `dlopen`...
    linkopts = ["-ldl"],
    deps = [
        ":signing",
        "//yacl/base:exception",
        "//yacl/utils:scope_guard",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/memory",
    ],
)

yacl_cc_test(
    name = "rsa_signing_test",
    srcs = ["rsa_signing_test.cc"],
    deps = [
        ":asymmetric_util",
        ":rsa_signing",
    ],
)

yacl_cc_library(
    name = "hmac",
    srcs = ["hmac.cc"],
    hdrs = ["hmac.h"],
    linkopts = ["-ldl"],
    deps = [
        "//yacl/base:byte_container_view",
        "//yacl/base:exception",
        "//yacl/crypto/base/hash:hash_interface",
        "//yacl/utils:scope_guard",
        "@com_github_openssl_openssl//:openssl",
    ],
)

yacl_cc_library(
    name = "hmac_sm3",
    srcs = ["hmac_sm3.h"],
    deps = [
        ":hmac",
    ],
)

yacl_cc_library(
    name = "hmac_sha256",
    srcs = ["hmac_sha256.h"],
    deps = [
        ":hmac",
    ],
)

yacl_cc_test(
    name = "hmac_all_test",
    srcs = ["hmac_all_test.cc"],
    deps = [
        ":hmac_sha256",
        ":hmac_sm3",
    ],
)

yacl_cc_library(
    name = "digital_envelope",
    srcs = ["digital_envelope.cc"],
    hdrs = ["digital_envelope.h"],
    deps = [
        ":asymmetric_rsa_crypto",
        ":asymmetric_sm2_crypto",
        ":hmac_sm3",
        ":symmetric_crypto",
        "//yacl/crypto/base/aead:gcm_crypto",
        "//yacl/crypto/base/aead:sm4_mac",
        "//yacl/crypto/base/hash:ssl_hash",
        "//yacl/crypto/tools:prg",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
    ],
)

yacl_cc_test(
    name = "digital_envelope_test",
    srcs = ["digital_envelope_test.cc"],
    deps = [
        ":digital_envelope",
    ],
)
