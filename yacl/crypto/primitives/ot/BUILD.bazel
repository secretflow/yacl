# Copyright 2022 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:yacl.bzl", "AES_COPT_FLAGS", "yacl_cc_binary", "yacl_cc_library", "yacl_cc_test")

package(default_visibility = ["//visibility:public"])

yacl_cc_library(
    name = "ot_store",
    srcs = ["ot_store.cc"],
    hdrs = ["ot_store.h"],
    deps = [
        "//yacl/base:dynamic_bitset",
        "//yacl/base:int128",
        "//yacl/crypto/utils:rand",
        "//yacl/link:context",
    ],
)

yacl_cc_test(
    name = "ot_store_test",
    srcs = ["ot_store_test.cc"],
    deps = [
        ":ot_store",
        "//yacl/link:test_util",
    ],
)

yacl_cc_library(
    name = "base_ot_interface",
    hdrs = ["base_ot_interface.h"],
    deps = ["//yacl/base:dynamic_bitset"],
)

yacl_cc_library(
    name = "portable_ot_interface",
    srcs = ["portable_ot_interface.cc"],
    hdrs = ["portable_ot_interface.h"],
    deps = [
        ":base_ot_interface",
        "//yacl/base:exception",
        "//yacl/crypto/tools:random_oracle",
        "//yacl/link",
        "@simplest_ot//:simplest_ot_portable",
    ],
)

yacl_cc_library(
    name = "x86_asm_ot_interface",
    srcs = ["x86_asm_ot_interface.cc"],
    hdrs = ["x86_asm_ot_interface.h"],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    deps = [
        ":base_ot_interface",
        "//yacl/base:exception",
        "//yacl/crypto/tools:random_oracle",
        "//yacl/link",
        "@simplest_ot//:simplest_ot_x86_asm",
    ],
)

yacl_cc_library(
    name = "base_ot",
    srcs = ["base_ot.cc"],
    hdrs = ["base_ot.h"],
    deps = [
        "//yacl/base:exception",
        "//yacl/link",
        "//yacl/crypto/primitives/ot:ot_store",
        "@com_google_absl//absl/types:span",
        ":portable_ot_interface",
    ] + select({
        "@bazel_tools//src/conditions:linux_x86_64": [
            ":x86_asm_ot_interface",
            "@com_github_google_cpu_features//:cpu_features",
        ],
        "//conditions:default": [],
    }),
)

yacl_cc_test(
    name = "base_ot_test",
    srcs = ["base_ot_test.cc"],
    deps = [
        ":base_ot",
        "//yacl/crypto/utils:rand",
        "//yacl/link:test_util",
    ],
)

yacl_cc_library(
    name = "iknp_ote",
    srcs = ["iknp_ote.cc"],
    hdrs = ["iknp_ote.h"],
    deps = [
        ":ot_store",
        "//yacl/base:exception",
        "//yacl/base:int128",
        "//yacl/crypto/tools:prg",
        "//yacl/crypto/tools:random_permutation",
        "//yacl/link",
        "//yacl/utils:matrix_utils",
    ],
)

yacl_cc_test(
    name = "iknp_ote_test",
    srcs = ["iknp_ote_test.cc"],
    deps = [
        ":iknp_ote",
        "//yacl/crypto/utils:rand",
        "//yacl/link:test_util",
    ],
)

yacl_cc_library(
    name = "kkrt_ote",
    srcs = ["kkrt_ote.cc"],
    hdrs = ["kkrt_ote.h"],
    copts = AES_COPT_FLAGS,
    deps = [
        ":ot_store",
        "//yacl/base:exception",
        "//yacl/base:int128",
        "//yacl/crypto/base/aes:aes_opt",
        "//yacl/crypto/base/hash:hash_utils",
        "//yacl/crypto/tools:prg",
        "//yacl/crypto/tools:random_oracle",
        "//yacl/crypto/tools:random_permutation",
        "//yacl/crypto/utils:rand",
        "//yacl/link",
        "//yacl/utils:matrix_utils",
    ],
)

yacl_cc_test(
    name = "kkrt_ote_test",
    srcs = ["kkrt_ote_test.cc"],
    deps = [
        ":kkrt_ote",
        "//yacl/crypto/utils:rand",
        "//yacl/link:test_util",
    ],
)

yacl_cc_library(
    name = "sgrr_ote",
    srcs = ["sgrr_ote.cc"],
    hdrs = ["sgrr_ote.h"],
    copts = AES_COPT_FLAGS,
    deps = [
        ":ot_store",
        "//yacl/crypto/base/aes:aes_opt",
        "//yacl/crypto/tools:prg",
        "//yacl/crypto/tools:random_permutation",
        "//yacl/crypto/utils:math",
        "//yacl/crypto/utils:rand",
        "//yacl/link",
        "@com_google_absl//absl/numeric:bits",
    ],
)

yacl_cc_test(
    name = "sgrr_ote_test",
    srcs = ["sgrr_ote_test.cc"],
    deps = [
        ":sgrr_ote",
        "//yacl/crypto/utils:rand",
        "//yacl/link:test_util",
    ],
)

yacl_cc_binary(
    name = "benchmark",
    srcs = [
        "benchmark.cc",
        "benchmark.h",
    ],
    deps = [
        ":base_ot",
        ":iknp_ote",
        ":kkrt_ote",
        ":sgrr_ote",
        "//yacl/crypto/utils:rand",
        "//yacl/link:test_util",
        "@com_github_google_benchmark//:benchmark_main",
        "@com_google_absl//absl/numeric:bits",
    ],
)
