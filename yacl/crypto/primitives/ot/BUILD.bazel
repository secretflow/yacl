# Copyright 2022 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:yacl.bzl", "EMP_COPT_FLAGS", "yacl_cc_library", "yacl_cc_test")

package(default_visibility = ["//visibility:public"])

yacl_cc_library(
    name = "punctured_rand_ot",
    srcs = [
        "punctured_rand_ot.cc",
    ],
    hdrs = [
        "punctured_rand_ot.h",
    ],
    deps = [
        ":options",
        "//yacl/crypto/tools:prg",
        "//yacl/link",
    ],
)

yacl_cc_test(
    name = "punctured_rand_ot_test",
    srcs = ["punctured_rand_ot_test.cc"],
    deps = [
        ":punctured_rand_ot",
        "//yacl/crypto/base:utils",
        "//yacl/link:test_util",
    ],
)

yacl_cc_library(
    name = "base_ot_interface",
    srcs = [],
    hdrs = ["base_ot_interface.h"],
)

yacl_cc_library(
    name = "portable_ot_interface",
    srcs = ["portable_ot_interface.cc"],
    hdrs = ["portable_ot_interface.h"],
    deps = [
        ":base_ot_interface",
        "//yacl/base:exception",
        "//yacl/crypto/tools:random_oracle",
        "//yacl/link",
        "@simplest_ot//:simplest_ot_portable",
    ],
)

yacl_cc_library(
    name = "x86_asm_ot_interface",
    srcs = ["x86_asm_ot_interface.cc"],
    hdrs = ["x86_asm_ot_interface.h"],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    deps = [
        ":base_ot_interface",
        "//yacl/base:exception",
        "//yacl/crypto/tools:random_oracle",
        "//yacl/link",
        "@simplest_ot//:simplest_ot_x86_asm",
    ],
)

yacl_cc_library(
    name = "base_ot",
    srcs = ["base_ot.cc"],
    hdrs = ["base_ot.h"],
    deps = [
        "//yacl/base:exception",
        "//yacl/link",
        "@com_google_absl//absl/types:span",
        ":portable_ot_interface",
    ] + select({
        "@bazel_tools//src/conditions:linux_x86_64": [
            ":x86_asm_ot_interface",
            "@com_github_google_cpu_features//:cpu_features",
        ],
        "//conditions:default": [],
    }),
)

yacl_cc_test(
    name = "base_ot_test",
    srcs = ["base_ot_test.cc"],
    deps = [
        ":base_ot",
        "//yacl/crypto/base:utils",
        "//yacl/link:test_util",
    ],
)

yacl_cc_library(
    name = "options",
    hdrs = ["options.h"],
    deps = [
        "//yacl/base:int128",
    ],
)

yacl_cc_library(
    name = "iknp_ot_extension",
    srcs = ["iknp_ot_extension.cc"],
    hdrs = ["iknp_ot_extension.h"],
    deps = [
        ":options",
        "//yacl/base:exception",
        "//yacl/base:int128",
        "//yacl/crypto/base:utils",
        "//yacl/crypto/tools:prg",
        "//yacl/crypto/tools:random_oracle",
        "//yacl/link",
        "//yacl/utils:matrix_utils",
    ],
)

yacl_cc_test(
    name = "iknp_ot_extension_test",
    srcs = ["iknp_ot_extension_test.cc"],
    deps = [
        ":iknp_ot_extension",
        "//yacl/link:test_util",
    ],
)

yacl_cc_library(
    name = "kkrt_ot_extension",
    srcs = ["kkrt_ot_extension.cc"],
    hdrs = ["kkrt_ot_extension.h"],
    copts = EMP_COPT_FLAGS,
    deps = [
        ":options",
        "//yacl/base:exception",
        "//yacl/base:int128",
        "//yacl/crypto/tools:prg",
        "//yacl/crypto/tools:random_oracle",
        "//yacl/crypto/utils:hash_util",
        "//yacl/link",
        "//yacl/utils:matrix_utils",
        "@com_github_emptoolkit_emp_tool//:emp-tool",
    ],
)

yacl_cc_test(
    name = "kkrt_ot_extension_test",
    srcs = ["kkrt_ot_extension_test.cc"],
    deps = [
        ":kkrt_ot_extension",
        "//yacl/crypto/base:utils",
        "//yacl/link:test_util",
    ],
)
